;;standard library
+1 = \x->+(x 1)
*2 = \x->*(2 x)
-1 = \x->-(x 1)
-2 = \x->-(x 2)

fst = hd
snd = \x->x.tl.hd
thd = \x->x.tl.tl.hd

map = \f l
->if(empty?(l)
     []
     cons(f(hd(l)) map(f tl(l))))

filter = \f l
->if(empty?(l)
     []
     if(f(hd(l))
        cons(hd(l) filter(f tl(l)))
        filter(f tl(l))))

foldl = \f i l
->if(empty?(l)
     i
     foldl(f f(i hd(l)) tl(l)))

foldr = \f l i
->if(empty?(l)
     i
     f(hd(l) foldr(f tl(l) i)))

range = \n
->let(h=\c l ->
        if(eq(c n)
           l
           h(c.+1 cons(c l)))
        h(0 []))

times = \f -> \n
->let(h=\x->if(lt(x 2)
                 f(x)
                 let(f(x) h(-(x 1))))
        h(n))

newline = \->print("\n")

;test
 if(eq( _FILE _MAIN)
    let(
        lst = [1 2 3 4 5]
        print(filter(\x->gt(x 3) map(+1 lst)) ) newline()
        print("foldl list:" foldl(+ 0 lst) ) newline()
        print("foldr list:" foldr(- lst 0) ) newline()
        print("range(5):" range(5) ) newline()
        6.times(\n->print(n))
        newline()
        )
    )
